@inject NavigationManager NavigationManager
@implements IDisposable

<header class="flex min-h-12 items-center justify-between gap-x-2 p-4">
    <div>
        @if (IsBackVisible)
        {
            <button type="button" class="border-transparent inline-flex items-center gap-x-2 rounded-full border p-2 text-sm font-medium text-gray-800 transition-all hover:bg-gray-100 focus:outline-hidden focus:bg-gray-100 active:scale-95 disabled:opacity-50 disabled:pointer-events-none dark:text-white dark:hover:bg-neutral-700 dark:focus:bg-neutral-700" onclick="history.back()">
                <svg class="lucide lucide-chevron-left-icon lucide-chevron-left" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="m15 18-6-6 6-6" />
                </svg>
            </button>
        }
        else
        {
            <img class="inline-block size-8 rounded-full" src="https://images.unsplash.com/photo-1568602471122-7832951cc4c5?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=facearea&facepad=2&w=300&h=300&q=80" alt="Avatar">
        }
    </div>
    <div class="font-semibold">
        <SectionOutlet SectionName="page-header" />
    </div>
    <div>
        <SectionOutlet SectionName="page-header-action" />
    </div>
</header>

@code
{
    private string currentUrl = "";

    private bool IsBackVisible => !string.IsNullOrEmpty(currentUrl);

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        GC.SuppressFinalize(this);
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(args.Location);
        InvokeAsync(StateHasChanged);
    }
}