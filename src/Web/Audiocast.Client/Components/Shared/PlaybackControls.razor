@using System.Globalization
@inject AudioService AudioService
@implements IDisposable

<div class="@Class">
    @* Progress slider *@
    <div class="mb-3 flex items-center gap-x-4">
        <span class="text-sm text-neutral-500 dark:text-neutral-400">@CurrentDuration</span>
        <input type="range" min="0" max="@TotalSeconds" value="@CurrentTime" class="h-2 w-full appearance-none rounded-lg bg-neutral-200 dark:bg-neutral-700" @onchange="OnSeekTime" />
        <span class="text-sm text-neutral-500 dark:text-neutral-400">@TotalDuration</span>
    </div>

    @* Playback controls *@
    <div class="flex items-center justify-evenly">
        <button type="button" class="rounded-full p-3 hover:bg-neutral-100 dark:hover:bg-neutral-700">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none"
            stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
            class="text-neutral-800 dark:text-white">
                <path d="m18 14 4 4-4 4" />
                <path d="m18 2 4 4-4 4" />
                <path d="M2 18h1.973a4 4 0 0 0 3.3-1.7l5.454-8.6a4 4 0 0 1 3.3-1.7H22" />
                <path d="M2 6h1.972a4 4 0 0 1 3.6 2.2" />
                <path d="M22 18h-6.041a4 4 0 0 1-3.3-1.8l-.359-.45" />
            </svg>
        </button>
        <button type="button" class="rounded-full p-3 hover:bg-neutral-100 dark:hover:bg-neutral-700">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none"
            stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
            class="text-neutral-800 dark:text-white">
                <polygon points="19 20 9 12 19 4 19 20" />
                <line x1="5" y1="19" x2="5" y2="5" />
            </svg>
            <span class="sr-only">Previous</span>
        </button>
        <button type="button" class="rounded-full bg-neutral-800 p-5 text-white dark:bg-white dark:text-neutral-800" @onclick="ToggleReproduction">
            @if (AudioService.IsPlaying)
            {
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                class="lucide lucide-pause-icon lucide-pause">
                    <rect x="14" y="4" width="4" height="16" rx="1" />
                    <rect x="6" y="4" width="4" height="16" rx="1" />
                </svg>
                <span class="sr-only">Pause</span>
            }
            else
            {
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                class="lucide lucide-play-icon lucide-play">
                    <polygon points="6 3 20 12 6 21 6 3" />
                </svg>
                <span class="sr-only">Play</span>
            }
        </button>
        <button type="button" class="rounded-full p-3 hover:bg-neutral-100 dark:hover:bg-neutral-700">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none"
            stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
            class="text-neutral-800 dark:text-white">
                <polygon points="5 4 15 12 5 20 5 4" />
                <line x1="19" y1="5" x2="19" y2="19" />
            </svg>
        </button>
        <button type="button" class="rounded-full p-3 hover:bg-neutral-100 dark:hover:bg-neutral-700">
            <span class="text-sm font-medium text-neutral-800 dark:text-white">1.0x</span>
        </button>
    </div>
</div>

@code
{
    [Parameter]
    public string? Class { get; set; }

    private string CurrentTime => AudioService.CurrentTime.ToString(CultureInfo.InvariantCulture);
    private string CurrentDuration => TimeSpan.FromSeconds(AudioService.CurrentTime).ToDurationString();

    public double TotalSeconds => AudioService.CurrentEpisode?.Duration?.TotalSeconds ?? 0;
    private string TotalDuration => AudioService.CurrentEpisode?.Duration?.ToDurationString() ?? "00:00:00";

    public void Dispose()
    {
        AudioService.IsPlayingChanged -= OnPlayingChanged;

        AudioService.Stop();
    }

    protected override void OnInitialized()
    {
        AudioService.IsPlayingChanged += OnPlayingChanged;
        AudioService.TimeChanged += OnTimeChanged;
    }

    private void ToggleReproduction()
    {
        if (AudioService.IsPlaying)
        {
            AudioService.Pause();
        }
        else
        {
            AudioService.Resume();
        }
    }

    private async void OnPlayingChanged(bool _)
    {
        await InvokeAsync(StateHasChanged);
    }

    private async void OnTimeChanged(double _)
    {
        await InvokeAsync(StateHasChanged);
    }

    private void OnSeekTime(ChangeEventArgs args)
    {
        AudioService.Seek(args.Value is string value ? double.Parse(value, CultureInfo.InvariantCulture) : 0);
    }
}