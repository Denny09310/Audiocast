@using System.Diagnostics.CodeAnalysis
@using System.Reflection
@inject NavigationManager NavigationManager
@inject TransitionManager TransitionManager
@implements IAsyncDisposable

<DynamicComponent Type="@Router" Parameters="@Parameters" />

@code
{
    /// <summary>
    /// Gets or sets the type of router component to use. The default is the type of <see cref="Microsoft.AspNetCore.Components.Routing.Router"/>.
    /// </summary>
    [Parameter]
    [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | DynamicallyAccessedMemberTypes.PublicProperties | DynamicallyAccessedMemberTypes.NonPublicProperties)]
    public Type Router { get; set; } = typeof(Router);

    /// <summary>
    /// Gets or sets the assembly that should be searched for components matching the URI.
    /// </summary>
    [Parameter, EditorRequired]
    public Assembly AppAssembly { get; set; } = null!;

    /// <summary>
    /// Gets or sets a collection of additional assemblies that should be searched for components
    /// that can match URIs.
    /// </summary>
    [Parameter] public IEnumerable<Assembly> AdditionalAssemblies { get; set; } = [];

    /// <summary>
    /// Gets or sets the content to display when no match is found for the requested route.
    /// </summary>
    [Parameter, EditorRequired]
    public RenderFragment NotFound { get; set; } = null!;

    /// <summary>
    /// Gets or sets the content to display when a match is found for the requested route.
    /// </summary>
    [Parameter, EditorRequired]
    public RenderFragment<RouteData> Found { get; set; } = null!;

    /// <summary>
    /// Get or sets the content to display when asynchronous navigation is in progress.
    /// </summary>
    [Parameter] public RenderFragment? Navigating { get; set; }

    /// <summary>
    /// Gets or sets a handler that should be called before navigating to a new page.
    /// </summary>
    [Parameter] public EventCallback<NavigationContext> OnNavigateAsync { get; set; }

    private bool rendered;

    private Dictionary<string, object?> Parameters { get; set; } = [];

    public async ValueTask DisposeAsync()
    {
        await TransitionManager.DisposeAsync();
        GC.SuppressFinalize(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            rendered = true;
            await TransitionManager.InitializeAsync();
            return;
        }

        await TransitionManager.EndTransitionAsync();
    }

    protected override void OnParametersSet() => Parameters = new()
        {
            [nameof(AppAssembly)] = AppAssembly,
            [nameof(AdditionalAssemblies)] = AdditionalAssemblies,
            [nameof(NotFound)] = NotFound,
            [nameof(Found)] = Found,
            [nameof(Navigating)] = Navigating,
            [nameof(OnNavigateAsync)] = EventCallback.Factory.Create<NavigationContext>(this, OnNavigateAsyncInternal),
        };

    private async Task OnNavigateAsyncInternal(NavigationContext context)
    {
        if (rendered) await TransitionManager.BeginTransitionAsync();
        await OnNavigateAsync.InvokeAsync(context);
    }
}