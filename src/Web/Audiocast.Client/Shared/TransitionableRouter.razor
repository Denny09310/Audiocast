@using System.Diagnostics.CodeAnalysis
@using System.Reflection
@inject NavigationManager NavigationManager
@inject TransitionManager TransitionManager
@implements IAsyncDisposable

<DynamicComponent Type="@RouterType" Parameters="@parameters" />

@code
{
    /// <summary>
    /// Gets or sets the type of router component to use. The default is the type of <see cref="Router"/>.
    /// </summary>
    [Parameter]
    [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | DynamicallyAccessedMemberTypes.PublicProperties | DynamicallyAccessedMemberTypes.NonPublicProperties)]
    public Type RouterType { get; set; } = typeof(Router);

    /// <summary>
    /// Gets or sets the assembly that should be searched for components matching the URI.
    /// </summary>
    [Parameter, EditorRequired]
    public Assembly AppAssembly { get; set; } = null!;

    /// <summary>
    /// Gets or sets a collection of additional assemblies that should be searched for components
    /// that can match URIs.
    /// </summary>
    [Parameter] public IEnumerable<Assembly> AdditionalAssemblies { get; set; } = Enumerable.Empty<Assembly>();

    /// <summary>
    /// Gets or sets the content to display when no match is found for the requested route.
    /// </summary>
    [Parameter, EditorRequired]
    public RenderFragment NotFound { get; set; } = null!;

    /// <summary>
    /// Gets or sets the content to display when a match is found for the requested route.
    /// </summary>
    [Parameter, EditorRequired]
    public RenderFragment<RouteData> Found { get; set; } = null!;

    /// <summary>
    /// Get or sets the content to display when asynchronous navigation is in progress.
    /// </summary>
    [Parameter] public RenderFragment? Navigating { get; set; }

    /// <summary>
    /// Gets or sets a handler that should be called before navigating to a new page.
    /// </summary>
    [Parameter] public EventCallback<NavigationContext> OnNavigateAsync { get; set; }

    private Dictionary<string, object?> parameters = new();

    private bool rendered;
    private IDisposable? disposable;

    protected override void OnParametersSet()
    {
        parameters = new()
        {
            [nameof(Router.AppAssembly)] = AppAssembly,
            [nameof(Router.AdditionalAssemblies)] = AdditionalAssemblies,
            [nameof(Router.NotFound)] = NotFound,
            [nameof(Router.Found)] = Found,
            [nameof(Router.OnNavigateAsync)] = Navigating,
            [nameof(Router.OnNavigateAsync)] = EventCallback.Factory.Create<NavigationContext>(this, OnNavigateAsyncInternal),
        };
    }

    protected override void OnInitialized()
    {
        disposable = NavigationManager.RegisterLocationChangingHandler(OnNavigatingAsync);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) rendered = true;
        await TransitionManager.EndTransitionAsync();
    }

    public async ValueTask DisposeAsync()
    {
        disposable?.Dispose();
        await TransitionManager.DisposeAsync();
    }

    private async Task OnNavigateAsyncInternal(NavigationContext context)
    {
        if (rendered) await TransitionManager.StartTransitionAsync();
        await OnNavigateAsync.InvokeAsync(context);
    }

    private async ValueTask OnNavigatingAsync(LocationChangingContext context)
    {
        if (rendered) await TransitionManager.PrepareTransitionAsync();
    }
}